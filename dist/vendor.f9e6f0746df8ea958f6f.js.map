{"version":3,"sources":["webpack:///webpack/bootstrap bb98963e30913e880cf4","webpack:///./src/vendor.js","webpack:///./node_modules/numeral/numeral.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","parentJsonpFunction","window","chunkIds","moreModules","executeModules","chunkId","result","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","shift","s","1","e","onScriptComplete","script","onerror","onload","clearTimeout","timeout","chunk","Error","undefined","installedChunkData","Promise","resolve","promise","reject","head","document","getElementsByTagName","createElement","type","charset","async","nc","setAttribute","src","p","0","setTimeout","appendChild","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","n","__esModule","object","property","oe","err","console","error","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","factory","this","Numeral","input","number","_input","_value","numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","len","k","arguments","multiplier","x","parts","correctionFactor","Array","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","reset","register","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","warn","trim","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","unformatRegex","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray"],"mappings":"aAuCA,SAAAA,EAAAC,GAGA,GAAAC,EAAAD,GACA,OAAAC,EAAAD,GAAAE,QAGA,IAAAC,EAAAF,EAAAD,IACAI,EAAAJ,EACAK,GAAA,EACAH,YAUA,OANAI,EAAAN,GAAAO,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,GAAA,EAGAF,EAAAD,QA1DA,IAAAM,EAAAC,OAAA,aACAA,OAAA,sBAAAC,EAAAC,EAAAC,GAIA,IADA,IAAAZ,EAAAa,EAAAC,EAAAV,EAAA,EAAAW,KACQX,EAAAM,EAAAM,OAAoBZ,IAC5BS,EAAAH,EAAAN,GACAa,EAAAJ,IACAE,EAAAG,KAAAD,EAAAJ,GAAA,IAEAI,EAAAJ,GAAA,EAEA,IAAAb,KAAAW,EACAQ,OAAAC,UAAAC,eAAAd,KAAAI,EAAAX,KACAM,EAAAN,GAAAW,EAAAX,IAIA,IADAQ,KAAAE,EAAAC,EAAAC,GACAG,EAAAC,QACAD,EAAAO,OAAAP,GAEA,GAAAH,EACA,IAAAR,EAAA,EAAYA,EAAAQ,EAAAI,OAA2BZ,IACvCU,EAAAf,IAAAwB,EAAAX,EAAAR,IAGA,OAAAU,GAIA,IAAAb,KAGAgB,GACAO,EAAA,GA6BAzB,EAAA0B,EAAA,SAAAZ,GA+BA,SAAAa,IAEAC,EAAAC,QAAAD,EAAAE,OAAA,KACAC,aAAAC,GACA,IAAAC,EAAAf,EAAAJ,GACA,IAAAmB,IACAA,GACAA,EAAA,OAAAC,MAAA,iBAAApB,EAAA,aAEAI,EAAAJ,QAAAqB,GAvCA,IAAAC,EAAAlB,EAAAJ,GACA,OAAAsB,EACA,WAAAC,QAAA,SAAAC,GAA0CA,MAI1C,GAAAF,EACA,OAAAA,EAAA,GAIA,IAAAG,EAAA,IAAAF,QAAA,SAAAC,EAAAE,GACAJ,EAAAlB,EAAAJ,IAAAwB,EAAAE,KAEAJ,EAAA,GAAAG,EAGA,IAAAE,EAAAC,SAAAC,qBAAA,WACAf,EAAAc,SAAAE,cAAA,UACAhB,EAAAiB,KAAA,kBACAjB,EAAAkB,QAAA,QACAlB,EAAAmB,OAAA,EACAnB,EAAAI,QAAA,KAEAhC,EAAAgD,IACApB,EAAAqB,aAAA,QAAAjD,EAAAgD,IAEApB,EAAAsB,IAAAlD,EAAAmD,EAAA,GAAArC,EAAA,KAA8DsC,EAAA,wBAA2BtC,GAAA,MACzF,IAAAkB,EAAAqB,WAAA1B,EAAA,MAgBA,OAfAC,EAAAC,QAAAD,EAAAE,OAAAH,EAaAc,EAAAa,YAAA1B,GAEAW,GAIAvC,EAAAuD,EAAAhD,EAGAP,EAAAwD,EAAAtD,EAGAF,EAAAyD,EAAA,SAAAtD,EAAAuD,EAAAC,GACA3D,EAAA4D,EAAAzD,EAAAuD,IACAtC,OAAAyC,eAAA1D,EAAAuD,GACAI,cAAA,EACAC,YAAA,EACAC,IAAAL,KAMA3D,EAAAiE,EAAA,SAAA7D,GACA,IAAAuD,EAAAvD,KAAA8D,WACA,WAA2B,OAAA9D,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAJ,EAAAyD,EAAAE,EAAA,IAAAA,GACAA,GAIA3D,EAAA4D,EAAA,SAAAO,EAAAC,GAAsD,OAAAhD,OAAAC,UAAAC,eAAAd,KAAA2D,EAAAC,IAGtDpE,EAAAmD,EAAA,IAGAnD,EAAAqE,GAAA,SAAAC,GAA8D,MAApBC,QAAAC,MAAAF,GAAoBA,GAG9DtE,IAAAwB,EAAA,kECpIAxB,EAAA,uBChBA,IAAAyE,EAAAC,GAQA,SAAAC,EAAAC,QAEAzC,KAAAuC,EAAA,mBAAAD,EAAA,GAAAA,EAAAjE,KAAAL,EAAAH,EAAAG,EAAAC,GAAAqE,KAAArE,EAAAD,QAAAuE,GAFA,CAQCG,EAAA,WA+BD,SAAAC,EAAAC,EAAAC,GACAH,KAAAI,OAAAF,EAEAF,KAAAK,OAAAF,EA7BA,IAAAG,EACAC,EAEAC,KACAC,KACAC,GACAC,cAAA,KACAC,WAAA,KACAC,WAAA,KACAC,cAAA,MACAC,mBAAA,GAEAC,GACAL,cAAAD,EAAAC,cACAC,WAAAF,EAAAE,WACAC,WAAAH,EAAAG,WACAC,cAAAJ,EAAAI,cACAC,kBAAAL,EAAAK,mBA68BA,OA97BAT,EAAA,SAAAJ,GACA,IAAAe,EACAC,EACAC,EACAC,EAEA,GAAAd,EAAAe,UAAAnB,GACAe,EAAAf,EAAAe,aACS,OAAAf,QAAA,IAAAA,EACTe,EAAA,OACS,UAAAf,GAAAK,EAAAe,MAAApB,GACTe,EAAA,UACS,oBAAAf,EACT,GAAAc,EAAAJ,YAAAV,IAAAc,EAAAJ,WACAK,EAAA,OACa,GAAAD,EAAAH,YAAAX,IAAAc,EAAAH,aAAAX,EAAAqB,QAAA,eAAAnF,OACb6E,EAAA,SACa,CACb,IAAAC,KAAAV,EAGA,IAFAY,EAAA,mBAAAZ,EAAAU,GAAAM,QAAAC,SAAAjB,EAAAU,GAAAM,QAAAC,WAAAjB,EAAAU,GAAAM,QAAAC,WAEAvB,EAAAwB,MAAAN,GAAA,CACAD,EAAAX,EAAAU,GAAAO,SAEA,MAMAR,GAFAE,KAAAb,EAAAC,EAAAoB,gBAEAzB,QAGAe,EAAAW,OAAA1B,IAAA,KAGA,WAAAD,EAAAC,EAAAe,IAIAX,EAAAuB,QAtEA,QAyEAvB,EAAAe,UAAA,SAAAS,GACA,OAAAA,aAAA7B,GAIAK,EAAAC,KAEAwB,eAAA,SAAAd,EAAAe,EAAAC,GACA,IAWAC,EACAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EApBAC,EAAAhC,EAAAH,EAAAU,QAAAL,eACA+B,GAAA,EACAC,GAAA,EACAC,EAAA,EACAC,EAAA,GAKAC,EAAA,GACAC,GAAA,EAgGA,GAnFA9B,KAAA,EAEAkB,EAAAa,KAAAb,IAAAlB,GAIAX,EAAAC,EAAA0C,SAAAjB,EAAA,MACAU,GAAA,EACAV,IAAAT,QAAA,iBACajB,EAAAC,EAAA0C,SAAAjB,EAAA,MAAA1B,EAAAC,EAAA0C,SAAAjB,EAAA,QACbM,EAAAhC,EAAAC,EAAA0C,SAAAjB,EAAA,KAAAA,EAAAkB,QAAA,KAAAjC,EAAA,EAAAe,EAAAkB,QAAA,QACAlB,IAAAT,QAAA,gBAIAjB,EAAAC,EAAA0C,SAAAjB,EAAA,OAGAE,KAFAA,EAAAF,EAAAN,MAAA,iBAEAQ,EAAA,GAGA5B,EAAAC,EAAA0C,SAAAjB,EAAA,QACAa,EAAA,KAGAb,IAAAT,QAAA,IAAA4B,OAAAN,EAAA,gBAEAV,GA7CA,OA6CAD,GAAA,MAAAA,GAEAW,GAAAJ,EAAAW,cAAAC,SACApC,GAhDA,MAiDiBkB,EAjDjB,MAiDiBA,GAhDjB,MAgDiBD,GAAA,MAAAA,GAEjBW,GAAAJ,EAAAW,cAAAE,QACArC,GAnDA,KAoDiBkB,EApDjB,KAoDiBA,GAnDjB,MAmDiBD,GAAA,MAAAA,GAEjBW,GAAAJ,EAAAW,cAAAG,QACAtC,GAtDA,MAuDiBkB,EAvDjB,KAuDiBA,GAtDjB,MAsDiBD,GAAA,MAAAA,KAEjBW,GAAAJ,EAAAW,cAAAI,SACAvC,GAzDA,MA8DAX,EAAAC,EAAA0C,SAAAjB,EAAA,SACAW,GAAA,EACAX,IAAAT,QAAA,YAIAa,EAAAnB,EAAAwC,WAAAC,MAAA,QACArB,EAAAL,EAAA0B,MAAA,QACAnB,EAAAP,EAAAkB,QAAA,KACAN,GAAAZ,EAAA0B,MAAA,QAAAA,MAAA,QAAAhC,MAAA,WAAAtF,OAEAiG,GACA/B,EAAAC,EAAA0C,SAAAZ,EAAA,MAEAA,GADAA,IAAAd,QAAA,SACAmC,MAAA,KACAZ,EAAAxC,EAAAC,EAAAoD,QAAA1C,EAAAoB,EAAA,GAAAjG,OAAAiG,EAAA,GAAAjG,OAAA6F,EAAAI,EAAA,GAAAjG,SAEA0G,EAAAxC,EAAAC,EAAAoD,QAAA1C,EAAAoB,EAAAjG,OAAA6F,GAGAG,EAAAU,EAAAY,MAAA,QAGAZ,EADAxC,EAAAC,EAAA0C,SAAAH,EAAA,KACAL,EAAAmB,WAAAd,UAAAY,MAAA,QAEA,GAGAf,GAAA,IAAAf,OAAAkB,EAAAe,MAAA,MACAf,EAAA,KAGAV,EAAA9B,EAAAC,EAAAoD,QAAA1C,EAAA,EAAAgB,GAIAY,IAAAX,GAAAN,OAAAQ,IAAA,KAAAS,IAAAJ,EAAAW,cAAAC,SAGA,OAFAjB,EAAA0B,OAAAlC,OAAAQ,GAAA,KAEAS,GACA,KAAAJ,EAAAW,cAAAI,SACAX,EAAAJ,EAAAW,cAAAG,QACA,MACA,KAAAd,EAAAW,cAAAG,QACAV,EAAAJ,EAAAW,cAAAE,QACA,MACA,KAAAb,EAAAW,cAAAE,QACAT,EAAAJ,EAAAW,cAAAC,SAYA,GALA/C,EAAAC,EAAA0C,SAAAb,EAAA,OACAA,IAAAyB,MAAA,GACAd,GAAA,GAGAX,EAAAhG,OAAAwG,EACA,QAAApH,EAAAoH,EAAAR,EAAAhG,OAAuDZ,EAAA,EAAOA,IAC9D4G,EAAA,IAAAA,EAwBA,OApBAG,GAAA,IACAH,IAAAqB,WAAAlC,QAAA,0BAA2D,KAAAkB,EAAAmB,WAAArB,YAG3D,IAAAP,EAAAkB,QAAA,OACAd,EAAA,IAGAI,EAAAJ,EAAAU,GAAAD,GAAA,IAEAH,EACAF,GAAAE,GAAAK,EAAA,QAAAP,GAAAE,GAAAK,EAAA,QAEAT,GAAA,EACAE,EAAA,IAAAF,GAAAS,EAAA,SAAAP,KAAAO,EAAA,SACiBA,IACjBP,EAAA,IAAAA,GAIAA,GAGAb,eAAA,SAAAoC,GACA,IAQAC,EACA/C,EAEAG,EAXAqB,EAAAhC,EAAAO,EAAAL,eACAsD,EAAAF,EACAX,GACAI,SAAA,EACAD,QAAA,EACAD,QAAA,EACAD,SAAA,IAOA,GAAArC,EAAAJ,YAAAmD,IAAA/C,EAAAJ,WACAK,EAAA,OACa,GAAAD,EAAAH,YAAAkD,IAAA/C,EAAAH,aAAAkD,EAAAxC,QAAA,eAAAnF,OACb6E,EAAA,SACa,CACbA,EAAA,EAEA,MAAAwB,EAAAmB,WAAAd,UACAiB,IAAAxC,QAAA,UAAAA,QAAAkB,EAAAmB,WAAAd,QAAA,MAGA,IAAAkB,KAAAZ,EAGA,GAFAhC,EAAA,IAAA+B,OAAA,YAAAV,EAAAW,cAAAY,GAAA,aAAAvB,EAAAyB,SAAAC,OAAA,iBAEAF,EAAAvC,MAAAN,GAAA,CACAH,GAAA+B,KAAAoB,IAAA,GAAAhB,EAAAY,IACA,MAKA/C,IAAA8C,EAAAL,MAAA,KAAAtH,OAAA4G,KAAAqB,IAAAN,EAAAL,MAAA,KAAAtH,OAAA,EAAA2H,EAAAL,MAAA,KAAAtH,OAAA,WAGA2H,IAAAxC,QAAA,iBAEAN,GAAAW,OAAAmC,GAGA,OAAA9C,GAEAK,MAAA,SAAAL,GACA,uBAAAA,GAAAK,MAAAL,IAEAgC,SAAA,SAAAc,EAAAO,GACA,WAAAP,EAAAb,QAAAoB,IAEAC,OAAA,SAAAR,EAAAS,EAAAC,GACA,OAAAV,EAAAF,MAAA,EAAAY,GAAAD,EAAAT,EAAAF,MAAAY,IAEAC,OAAA,SAAAC,EAAAC,GACA,UAAA5E,KACA,UAAA6E,UAAA,sDAGA,sBAAAD,EACA,UAAAC,UAAAD,EAAA,sBAGA,IAGA3D,EAHA6D,EAAAvI,OAAAoI,GACAI,EAAAD,EAAA1I,SAAA,EACA4I,EAAA,EAGA,OAAAC,UAAA7I,OACA6E,EAAAgE,UAAA,OACa,CACb,KAAAD,EAAAD,KAAAC,KAAAF,IACAE,IAGA,GAAAA,GAAAD,EACA,UAAAF,UAAA,+CAGA5D,EAAA6D,EAAAE,KAEA,KAAkBA,EAAAD,EAASC,IAC3BA,KAAAF,IACA7D,EAAA2D,EAAA3D,EAAA6D,EAAAE,KAAAF,IAGA,OAAA7D,GAOAiE,WAAA,SAAAC,GACA,IAAAC,EAAAD,EAAA1B,WAAAC,MAAA,KAEA,OAAA0B,EAAAhJ,OAAA,IAAA4G,KAAAoB,IAAA,GAAAgB,EAAA,GAAAhJ,SAOAiJ,iBAAA,WAGA,OAFAC,MAAA9I,UAAAqH,MAAAlI,KAAAsJ,WAEAP,OAAA,SAAAa,EAAAC,GACA,IAAAC,EAAAlF,EAAA2E,WAAAM,GACA,OAAAD,EAAAE,EAAAF,EAAAE,GACa,IAQb9B,QAAA,SAAA1C,EAAAyE,EAAAzD,EAAA0D,GACA,IAEAC,EACAC,EACAC,EACAtD,EALAuD,EAAA9E,EAAAwC,WAAAC,MAAA,KACAsC,EAAAN,GAAAC,GAAA,GAuBA,OAfAC,EADA,IAAAG,EAAA3J,OACA4G,KAAAqB,IAAArB,KAAAiD,IAAAF,EAAA,GAAA3J,OAAA4J,GAAAN,GAEAM,EAGAF,EAAA9C,KAAAoB,IAAA,GAAAwB,GAGApD,GAAAP,EAAAhB,EAAA,KAAA2E,GAAAE,GAAAnC,QAAAiC,GAEAD,EAAAD,EAAAE,IACAC,EAAA,IAAA1C,OAAA,YAAoDwC,GAAAD,EAAAE,IAAA,MACpDpD,IAAAjB,QAAAsE,EAAA,KAGArD,IAKAlC,EAAAU,UAGAV,EAAAE,UAGAF,EAAAG,UAKAH,EAAAmC,OAAA,SAAAyD,GAKA,OAJAA,IACAlF,EAAAL,cAAAuF,EAAAC,eAGAnF,EAAAL,eAMAL,EAAA8F,WAAA,SAAAF,GACA,IAAAA,EACA,OAAAzF,EAAAO,EAAAL,eAKA,GAFAuF,IAAAC,eAEA1F,EAAAyF,GACA,UAAA7I,MAAA,oBAAA6I,GAGA,OAAAzF,EAAAyF,IAGA5F,EAAA+F,MAAA,WACA,QAAA9G,KAAAmB,EACAM,EAAAzB,GAAAmB,EAAAnB,IAIAe,EAAAM,WAAA,SAAAoB,GACAhB,EAAAJ,WAAA,mBAAAoB,EAAA,MAGA1B,EAAAO,WAAA,SAAAmB,GACAhB,EAAAH,WAAA,mBAAAmB,EAAA,MAGA1B,EAAAQ,cAAA,SAAAkB,GACAhB,EAAAF,cAAA,mBAAAkB,EAAA,OAGA1B,EAAAgG,SAAA,SAAAtI,EAAAa,EAAAmD,GAGA,GAFAnD,IAAAsH,cAEAnG,KAAAhC,EAAA,KAAAa,GACA,UAAAgG,UAAAhG,EAAA,IAAAb,EAAA,wBAKA,OAFAgC,KAAAhC,EAAA,KAAAa,GAAAmD,EAEAA,GAIA1B,EAAAiG,SAAA,SAAAC,EAAAC,GACA,IAAAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAX,EACAY,EAeA,GAZA,iBAAAR,IACAA,GAAA,GAEA9G,QAAAuH,MACAvH,QAAAuH,KAAA,6DAAAT,KAKAA,IAAAU,QAGAxF,MAAA,SACA,SAIA,QAAA8E,EACA,SAIA,IAEAJ,EAAA9F,EAAA8F,WAAAK,GACS,MAAA5J,GACTuJ,EAAA9F,EAAA8F,WAAA9F,EAAAmC,UAeA,OAXAmE,EAAAR,EAAAlC,SAAAC,OACA2C,EAAAV,EAAAhD,cACAsD,EAAAN,EAAAxC,WAAAd,QAEA6D,EADA,MAAAP,EAAAxC,WAAArB,UACA,MAEA6D,EAAAxC,WAAArB,WAKA,QADAyE,EAAAR,EAAA9E,MAAA,cAEA8E,IAAAW,OAAA,GACAH,EAAA,KAAAJ,OAOA,QADAI,EAAAR,EAAA9E,MAAA,cAEA8E,IAAA3C,MAAA,MACAmD,EAAA,KAAAF,EAAAtD,UAAAwD,EAAA,KAAAF,EAAAvD,SAAAyD,EAAA,KAAAF,EAAAxD,SAAA0D,EAAA,KAAAF,EAAAzD,aAKA0D,EAAA,IAAA5D,OAAAwD,EAAA,QAEAH,EAAA9E,MAAA,gBACAmF,EAAAL,EAAA9C,MAAAgD,IACAtK,OAAA,IAGAyK,EAAAzK,OAAA,GACAyK,EAAA,GAAAnF,MAAA,cAAAmF,EAAA,GAAAnF,MAAAqF,GAEA,IAAAF,EAAA,GAAAzK,QACAyK,EAAA,GAAAnF,MAAA,UAAAmF,EAAA,GAAAnF,MAAAqF,KAAAF,EAAA,GAAAnF,MAAA,UAEAmF,EAAA,GAAAnF,MAAA,cAAAmF,EAAA,GAAAnF,MAAAqF,KAAAF,EAAA,GAAAnF,MAAA,cAcApB,EAAA8G,GAAAnH,EAAAzD,WACA6K,MAAA,WACA,OAAA/G,EAAAN,OAEAgC,OAAA,SAAAsF,EAAArF,GACA,IAEAf,EACAsB,EACA+E,EAJAtG,EAAAjB,KAAAK,OACA2B,EAAAsF,GAAAtG,EAAAF,cASA,GAHAmB,KAAAe,KAAAwE,MAGA,IAAAvG,GAAA,OAAAD,EAAAJ,WACA4B,EAAAxB,EAAAJ,gBACa,UAAAK,GAAA,OAAAD,EAAAH,WACb2B,EAAAxB,EAAAH,eACa,CACb,IAAAK,KAAAV,EACA,GAAAwB,EAAAN,MAAAlB,EAAAU,GAAAM,QAAAQ,QAAA,CACAuF,EAAA/G,EAAAU,GAAAc,OAEA,MAMAQ,GAFA+E,KAAAjH,EAAAC,EAAAwB,gBAEAd,EAAAe,EAAAC,GAGA,OAAAO,GAEAvB,MAAA,WACA,OAAAjB,KAAAK,QAEAH,MAAA,WACA,OAAAF,KAAAI,QAEAqH,IAAA,SAAAxG,GAGA,OAFAjB,KAAAK,OAAAuB,OAAAX,GAEAjB,MAEA0H,IAAA,SAAAzG,GACA,IAAA0G,EAAApH,EAAA8E,iBAAA1J,KAAA,KAAAqE,KAAAK,OAAAY,GAQA,OAFAjB,KAAAK,OAAAE,EAAAmE,QAAA1E,KAAAK,OAAAY,GAJA,SAAAsE,EAAAqC,EAAAC,EAAAC,GACA,OAAAvC,EAAAvC,KAAAwE,MAAAG,EAAAC,IAGA,GAAAD,EAEA3H,MAEA+H,SAAA,SAAA9G,GACA,IAAA0G,EAAApH,EAAA8E,iBAAA1J,KAAA,KAAAqE,KAAAK,OAAAY,GAQA,OAFAjB,KAAAK,OAAAE,EAAAmE,QAAAzD,GAJA,SAAAsE,EAAAqC,EAAAC,EAAAC,GACA,OAAAvC,EAAAvC,KAAAwE,MAAAG,EAAAC,IAGA5E,KAAAwE,MAAAxH,KAAAK,OAAAsH,MAEA3H,MAEAgI,SAAA,SAAA/G,GAQA,OAFAjB,KAAAK,OAAAE,EAAAmE,QAAA1E,KAAAK,OAAAY,GALA,SAAAsE,EAAAqC,EAAAC,EAAAC,GACA,IAAAH,EAAApH,EAAA8E,iBAAAE,EAAAqC,GACA,OAAA5E,KAAAwE,MAAAjC,EAAAoC,GAAA3E,KAAAwE,MAAAI,EAAAD,GAAA3E,KAAAwE,MAAAG,MAGA,GAEA3H,MAEAiI,OAAA,SAAAhH,GAQA,OAFAjB,KAAAK,OAAAE,EAAAmE,QAAA1E,KAAAK,OAAAY,GALA,SAAAsE,EAAAqC,EAAAC,EAAAC,GACA,IAAAH,EAAApH,EAAA8E,iBAAAE,EAAAqC,GACA,OAAA5E,KAAAwE,MAAAjC,EAAAoC,GAAA3E,KAAAwE,MAAAI,EAAAD,KAKA3H,MAEAkI,WAAA,SAAAjH,GACA,OAAA+B,KAAAb,IAAA7B,EAAAN,KAAAK,QAAA0H,SAAA9G,cAQAX,EAAAgG,SAAA,eACA1C,YACArB,UAAA,IACAO,QAAA,KAEAM,eACAI,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEA8E,QAAA,SAAAhI,GACA,IAAAiI,EAAAjI,EAAA,GACA,aAAAA,EAAA,aACA,IAAAiI,EAAA,KACA,IAAAA,EAAA,KACA,IAAAA,EAAA,WAEAlE,UACAC,OAAA,OAOA7D,EAAAgG,SAAA,gBACA9E,SACAQ,OAAA,QACAP,SAAA,SAEAO,OAAA,SAAAf,EAAAe,EAAAC,GACA,IACAO,EADA6F,EAAA/H,EAAAC,EAAA0C,SAAAjB,EAAA,eAoBA,OAjBAf,GAAA,IAGAe,IAAAT,QAAA,aAEAiB,EAAAlC,EAAAC,EAAAwB,eAAAd,EAAAe,EAAAC,GAEA3B,EAAAC,EAAA0C,SAAAT,EAAA,OACAA,IAAAkB,MAAA,KAEA4E,QAAA,IAAAD,EAAA,OAEA7F,IAAA+F,KAAA,KAEA/F,IAAA6F,EAAA,MAGA7F,GAEAf,SAAA,SAAAsC,GACA,aAAAzD,EAAAC,EAAAoB,eAAAoC,IAAAJ,QAAA,OAMA,WACA,IAAAb,GACA0F,KAAA,IACAC,UAAA,8CAEAC,GACAF,KAAA,KACAC,UAAA,sDAMAE,EAHA7F,EAAA2F,SAAAG,OAAAF,EAAAD,SAAAI,OAAA,SAAAC,GACA,OAAAhG,EAAA2F,SAAAvF,QAAA4F,GAAA,KAEAP,KAAA,KAEAI,EAAA,IAAAA,EAAApH,QAAA,mBAEAjB,EAAAgG,SAAA,kBACA9E,SACAQ,OAAA,aACAP,SAAA,IAAA0B,OAAAwF,IAEA3G,OAAA,SAAAf,EAAAe,EAAAC,GACA,IAGA6D,EACAzB,EACA4B,EAJA8C,EAAAzI,EAAAC,EAAA0C,SAAAjB,EAAA,MAAA0G,EAAA5F,EACAkG,EAAA1I,EAAAC,EAAA0C,SAAAjB,EAAA,OAAA1B,EAAAC,EAAA0C,SAAAjB,EAAA,cAQA,IAFAA,IAAAT,QAAA,aAEAuE,EAAA,EAA2BA,GAAAiD,EAAAN,SAAArM,OAAgC0J,IAI3D,GAHAzB,EAAArB,KAAAoB,IAAA2E,EAAAP,KAAA1C,GACAG,EAAAjD,KAAAoB,IAAA2E,EAAAP,KAAA1C,EAAA,GAEA,OAAA7E,GAAA,IAAAA,MAAAoD,GAAApD,EAAAgF,EAAA,CACA+C,GAAAD,EAAAN,SAAA3C,GAEAzB,EAAA,IACApD,GAAAoD,GAGA,MAMA,OAFA/D,EAAAC,EAAAwB,eAAAd,EAAAe,EAAAC,GAEA+G,GAEAvH,SAAA,SAAAsC,GACA,IACA+B,EACAmD,EAFAhI,EAAAX,EAAAC,EAAAoB,eAAAoC,GAIA,GAAA9C,EAAA,CACA,IAAA6E,EAAAhD,EAAA2F,SAAArM,OAAA,EAAyD0J,GAAA,EAAYA,IAAA,CACrE,GAAAxF,EAAAC,EAAA0C,SAAAc,EAAAjB,EAAA2F,SAAA3C,IAAA,CACAmD,EAAAjG,KAAAoB,IAAAtB,EAAA0F,KAAA1C,GAEA,MAGA,GAAAxF,EAAAC,EAAA0C,SAAAc,EAAA2E,EAAAD,SAAA3C,IAAA,CACAmD,EAAAjG,KAAAoB,IAAAsE,EAAAF,KAAA1C,GAEA,OAIA7E,GAAAgI,GAAA,EAGA,OAAAhI,KA3EA,GAkFAX,EAAAgG,SAAA,qBACA9E,SACAQ,OAAA,QAEAA,OAAA,SAAAf,EAAAe,EAAAC,GACA,IAKAO,EAEAhH,EAPAiH,EAAAnC,EAAAG,QAAAH,EAAAU,QAAAL,eACAuI,GACAC,OAAAnH,EAAAN,MAAA,2BACA0H,MAAApH,EAAAN,MAAA,4BAqBA,IAdAM,IAAAT,QAAA,eAGAiB,EAAAlC,EAAAC,EAAAwB,eAAAd,EAAAe,EAAAC,GAGAhB,GAAA,GACAiI,EAAAC,OAAAD,EAAAC,OAAA5H,QAAA,aACA2H,EAAAE,MAAAF,EAAAE,MAAA7H,QAAA,cACaN,EAAA,IAAAX,EAAAC,EAAA0C,SAAAiG,EAAAC,OAAA,OAAA7I,EAAAC,EAAA0C,SAAAiG,EAAAC,OAAA,OACbD,EAAAC,OAAA,IAAAD,EAAAC,QAIA3N,EAAA,EAAuBA,EAAA0N,EAAAC,OAAA/M,OAA2BZ,IAGlD,OAFA0N,EAAAC,OAAA3N,IAGA,QACAgH,EAAAlC,EAAAC,EAAAgE,OAAA/B,EAAAC,EAAAyB,SAAAC,OAAA3I,GACA,MACA,QACAgH,EAAAlC,EAAAC,EAAAgE,OAAA/B,EAAA,IAAAhH,EAAAiH,EAAAyB,SAAAC,OAAA/H,OAAA,GAMA,IAAAZ,EAAA0N,EAAAE,MAAAhN,OAAA,EAA8CZ,GAAA,EAAQA,IAGtD,OAFA0N,EAAAE,MAAA5N,IAGA,QACAgH,EAAAhH,IAAA0N,EAAAE,MAAAhN,OAAA,EAAAoG,EAAAC,EAAAyB,SAAAC,OAAA7D,EAAAC,EAAAgE,OAAA/B,EAAAC,EAAAyB,SAAAC,SAAA+E,EAAAE,MAAAhN,QAAA,EAAAZ,KACA,MACA,QACAgH,EAAAhH,IAAA0N,EAAAE,MAAAhN,OAAA,EAAAoG,EAAA,IAAAlC,EAAAC,EAAAgE,OAAA/B,EAAA,MAAA0G,EAAAE,MAAAhN,QAAA,EAAAZ,GAAAiH,EAAAyB,SAAAC,OAAA/H,OAAA,IAMA,OAAAoG,KAOAlC,EAAAgG,SAAA,wBACA9E,SACAQ,OAAA,WACAP,SAAA,YAEAO,OAAA,SAAAf,EAAAe,EAAAC,GACA,IAEAmD,GADA,iBAAAnE,GAAAX,EAAAC,EAAAe,MAAAL,GAAA,OAAAA,EAAAoI,iBACA3F,MAAA,KAMA,OAJA1B,IAAAT,QAAA,eAAgD,IAEhDjB,EAAAC,EAAAwB,eAAAH,OAAAwD,EAAA,IAAApD,EAAAC,GAEA,IAAAmD,EAAA,IAEA3D,SAAA,SAAAsC,GACA,IAAAqB,EAAA9E,EAAAC,EAAA0C,SAAAc,EAAA,MAAAA,EAAAL,MAAA,MAAAK,EAAAL,MAAA,MACAzC,EAAAW,OAAAwD,EAAA,IACAU,EAAAlE,OAAAwD,EAAA,IAUA,OARAU,EAAAxF,EAAAC,EAAA0C,SAAAc,EAAA,MAAA+B,IAAA,EAAAA,EAQAxF,EAAAC,EAAAmE,QAAAzD,EAAA+B,KAAAoB,IAAA,GAAA0B,IANA,SAAAP,EAAAqC,EAAAC,EAAAC,GACA,IAAAH,EAAArH,EAAAC,EAAA8E,iBAAAE,EAAAqC,GAEA,OADArC,EAAAoC,GAAAC,EAAAD,UAIA,MAOArH,EAAAgG,SAAA,oBACA9E,SACAQ,OAAA,OAEAA,OAAA,SAAAf,EAAAe,EAAAC,GACA,IAAAQ,EAAAnC,EAAAG,QAAAH,EAAAU,QAAAL,eAEAwH,EAAA7H,EAAAC,EAAA0C,SAAAjB,EAAA,aASA,OANAA,IAAAT,QAAA,WAEA4G,GAAA1F,EAAA0F,QAAAlH,GAEAX,EAAAC,EAAAwB,eAAAd,EAAAe,EAAAC,GAEAkG,KAOA7H,EAAAgG,SAAA,uBACA9E,SACAQ,OAAA,MACAP,SAAA,OAEAO,OAAA,SAAAf,EAAAe,EAAAC,GACA,IACAO,EADA6F,EAAA/H,EAAAC,EAAA0C,SAAAjB,EAAA,aAsBA,OAnBA1B,EAAAU,QAAAD,oBACAE,GAAA,KAIAe,IAAAT,QAAA,YAEAiB,EAAAlC,EAAAC,EAAAwB,eAAAd,EAAAe,EAAAC,GAEA3B,EAAAC,EAAA0C,SAAAT,EAAA,OACAA,IAAAkB,MAAA,KAEA4E,QAAA,IAAAD,EAAA,KAEA7F,IAAA+F,KAAA,KAEA/F,IAAA6F,EAAA,IAGA7F,GAEAf,SAAA,SAAAsC,GACA,IAAA5D,EAAAG,EAAAC,EAAAoB,eAAAoC,GACA,OAAAzD,EAAAU,QAAAD,kBACA,IAAAZ,EAEAA,KAOAG,EAAAgG,SAAA,iBACA9E,SACAQ,OAAA,MACAP,SAAA,OAEAO,OAAA,SAAAf,EAAAe,EAAAC,GACA,IAAAqH,EAAAtG,KAAAuG,MAAAtI,EAAA,OACAuI,EAAAxG,KAAAuG,OAAAtI,EAAA,GAAAqI,EAAA,QACAG,EAAAzG,KAAAwE,MAAAvG,EAAA,GAAAqI,EAAA,MAAAE,GAEA,OAAAF,EAAA,KAAAE,EAAA,OAAAA,KAAA,KAAAC,EAAA,OAAAA,MAEAhI,SAAA,SAAAsC,GACA,IAAA2F,EAAA3F,EAAAL,MAAA,KACA+F,EAAA,EAgBA,OAbA,IAAAC,EAAAtN,QAEAqN,GAAA,GAAA7H,OAAA8H,EAAA,OAEAD,GAAA,GAAA7H,OAAA8H,EAAA,IAEAD,GAAA7H,OAAA8H,EAAA,KACa,IAAAA,EAAAtN,SAEbqN,GAAA,GAAA7H,OAAA8H,EAAA,IAEAD,GAAA7H,OAAA8H,EAAA,KAEA9H,OAAA6H,MAKAnJ","file":"vendor.f9e6f0746df8ea958f6f.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tvar parentJsonpFunction = window[\"webpackJsonp\"];\n \twindow[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [], result;\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n \t\tif(executeModules) {\n \t\t\tfor(i=0; i < executeModules.length; i++) {\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = executeModules[i]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// objects to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData === 0) {\n \t\t\treturn new Promise(function(resolve) { resolve(); });\n \t\t}\n\n \t\t// a Promise means \"currently loading\".\n \t\tif(installedChunkData) {\n \t\t\treturn installedChunkData[2];\n \t\t}\n\n \t\t// setup Promise in chunk cache\n \t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t});\n \t\tinstalledChunkData[2] = promise;\n\n \t\t// start chunk loading\n \t\tvar head = document.getElementsByTagName('head')[0];\n \t\tvar script = document.createElement('script');\n \t\tscript.type = 'text/javascript';\n \t\tscript.charset = 'utf-8';\n \t\tscript.async = true;\n \t\tscript.timeout = 120000;\n\n \t\tif (__webpack_require__.nc) {\n \t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t}\n \t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".\" + {\"0\":\"a088122b02505296027e\"}[chunkId] + \".js\";\n \t\tvar timeout = setTimeout(onScriptComplete, 120000);\n \t\tscript.onerror = script.onload = onScriptComplete;\n \t\tfunction onScriptComplete() {\n \t\t\t// avoid mem leaks in IE.\n \t\t\tscript.onerror = script.onload = null;\n \t\t\tclearTimeout(timeout);\n \t\t\tvar chunk = installedChunks[chunkId];\n \t\t\tif(chunk !== 0) {\n \t\t\t\tif(chunk) {\n \t\t\t\t\tchunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));\n \t\t\t\t}\n \t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t}\n \t\t};\n \t\thead.appendChild(script);\n\n \t\treturn promise;\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bb98963e30913e880cf4","/* This file contains references to the vendor libraries\r\n we're using in this project. This is used by webpack\r\n in the production build only*. A separate bundle for vendor\r\n code is useful since it's unlikely to change as often\r\n as the application's code. So all the libraries we reference\r\n here will be written to vendor.js so they can be\r\n cached until one of them change. So basically, this avoids\r\n customers having to download a huge JS file anytime a line\r\n of code changes. They only have to download vendor.js when\r\n a vendor library changes which should be less frequent.\r\n Any files that aren't referenced here will be bundled into\r\n main.js for the production build.\r\n */\r\n\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport numeral from 'numeral';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor.js","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/numeral/numeral.js\n// module id = 5\n// module chunks = 1"],"sourceRoot":""}